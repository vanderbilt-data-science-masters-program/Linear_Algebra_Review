coef(lin.model)
X
X2 <- matrix(c(rep(1,length(example.data$wt)),example.data$wt, example.data$new),ncol=3)
Y <- example.data$mpg
# Same result:
solve(t(X2)%*%X2)%*%t(X2)%*%Y
coef(lin.model)
coef(lin.model2)
# Same result:
ginv(t(X2)%*%X2)%*%t(X2)%*%Y
gaussianElimination(D,e, verbose=TRUE, fractions=TRUE)
# install.packages("MASS")
# install.packages("knitr")
# install.packages("matlib")
# install.packages("pcaPP")
# install.packages("devtools")
library(devtools)
# install_github("vqv/ggbiplot")
library(MASS)
library(knitr)
library(matlib)
library(pcaPP)
library(ggbiplot)
example.data <- mtcars
v = c(1,7,3)
A = matrix(
c(2, 4, 3, 1, 5,2), # the data elements
nrow=2,
ncol=3,
byrow = TRUE)        # fill matrix by rows (default)
B = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=3,              # number of rows
ncol=2,              # number of columns
byrow = FALSE)       # fill matrix by columns
C = matrix(
c(25, 4, 31, 1, 52, 7, 81, 22, 13), # the data elements
nrow=3,              # number of rows
byrow = TRUE)        # fill matrix by rows (default)
I = diag(1,      # The element(s) on the diagonal of matrix
nrow=3) # number of rows
# (assumes same number of columns or square)
#matrix(c(1,0), nrow=2)
U = matrix(1,
nrow=3,
ncol=3)
dimnames(A) = list(
c("row1", "row2"),         # row names
c("col1", "col2", "col3"))
names(v)<- c("v1","v2","v3")
t(A)
k = 5
kB = 5*B
#t(c(0,2)*t(B))
t(v)%*%B
t(B)%*%v
A%*%B
t(B)%*%C
C*C
C%*%C
B%*%A
B%*%A%*%C
C+72
D <- matrix(c(1,1,1,2,3,7,-1,0,-9), nrow=3, byrow = TRUE)
e <- c(3,0,17)
gaussianElimination(D,e, verbose=TRUE, fractions=TRUE)
D <- matrix(c(1,1,1,2,3,7,-1,0,9), nrow=3, byrow = TRUE)
e <- c(3,0,17)
gaussianElimination(D,e, verbose=TRUE, fractions=TRUE)
D <- matrix(c(1,1,1,2,3,7,1,0,9), nrow=3, byrow = TRUE)
e <- c(3,0,-17)
gaussianElimination(D,e, verbose=TRUE, fractions=TRUE)
gaussianElimination(D)
D <- matrix(c(1,1,1,2,3,7,1,0,9, 3,0,-17), nrow=3, byrow = TRUE)
gaussianElimination(D)
gaussianElimination(D, fractions=TRUE)
gaussianElimination(D, fractions=TRUE)
V <- matrix(c(2, 5, 3,1, 1, 1,4,-2,0), nrow=3, byrow = FALSE)
V
gaussianElimination(V, verbose=TRUE, fractions=TRUE)
V <- matrix(c(2, 5, 3,1, 1, 1,4,-2,0), nrow=3, byrow = TRUE)
gaussianElimination(V, verbose=TRUE, fractions=TRUE)
A <- matrix(c(1,2,3, -1, 2, 1), 3, 2)
# Print the system of equations
showEqn(A,b)
# install.packages("MASS")
# install.packages("knitr")
# install.packages("matlib")
# install.packages("pcaPP")
# install.packages("devtools")
# install_github("vqv/ggbiplot")
library(MASS)
library(knitr)
library(tidyverse)
library(magrittr)
library(dplyr)
library(matlib)
library(pcaPP)
library(devtools)
library(ggbiplot)
example.data <- mtcars
v = c(1,7,3)
# The exact same when wrapped in as.vector()
v = as.vector(c(1,7,3))
# Or can create a 1 column matrix
v = matrix(c(1,7,3))
A = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=2,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows (default)
B = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=3,              # number of rows
ncol=2,              # number of columns
byrow = FALSE)       # fill matrix by columns
C = matrix(
c(25, 4, 31, 1, 52, 7, 81, 22, 13), # the data elements
nrow=3,              # number of rows
byrow = TRUE)        # fill matrix by rows (default)
I = diag(1,      # The element(s) on the diagonal of matrix
nrow=3) # number of rows
# (assumes same number of columns or square)
U = matrix(1,
nrow=3,
ncol=3)
dimnames(A) = list(
c("row1", "row2"),         # row names
c("col1", "col2", "col3")) # column names
# Check the row and column labels (in list format)
# labels(A)
# t(A)
k = 5
kB = k*B
# WRONG
# c(0,2)*B
# t(c(0,2))*B
# Error: non-conformable arrays
# 3 CORRECT methods
B.scaled = B%*%diag(c(0,2))
B.scaled = t(apply( B , 1 , function(x) x*c(0,2)))
B.scaled = sweep( B , 2 , c(0,2),'*')
vB = t(v)%*%B
Bv = t(B)%*%v
# Using element-wise mulitplication( * ):
# A*B
# Error: non-conformable arrays
AB = A%*%B #returns a 2x2 matrix
BA = B%*%A #returns a 3x3 matrix
BAC = B%*%A%*%C
C.centered = C-3
C.hat = C + matrix(c(0,-5,7), nrow=3, ncol=3, byrow=TRUE)
C.hat = t(apply( C , 1 , function(x) x+c(0,-5,7)))
C.hat = sweep( C , 2 , c(0,-5,7),'+')
A <- as.data.frame(A)
#as.matrix(A)
A %<>% mutate(col1=col1*8)
D <- matrix(c(1,1,1,2,3,7,1,0,9), nrow=3, byrow = TRUE)
e <- c(3,0,-17)
gaussianElimination(D,e, verbose=TRUE, fractions=TRUE)
D <- matrix(c(1,1,3,-2), nrow=2, byrow = TRUE)
e <- c(3,4)
gaussianElimination(D,e, verbose=TRUE, fractions=TRUE)
V <- matrix(c(2, 5, 3,1, 1, 1,4,-2,0), nrow=3, byrow = TRUE)
gaussianElimination(V, verbose=TRUE, fractions=TRUE)
A <- matrix(c(1,2,3, -1, 2, 1), 3, 2)
b <- c(2,1,3)
# Print the system of equations
showEqn(A,b)
# Test for consistency, are the ranks equal?
R(A)==R(cbind(A,b))
# Solve for the solution
Solve(A,b, fractions = TRUE)
plotEqn(A,b)
b.new <- c(2,1,6)
# Print the system of equations
showEqn(A,b.new)
# Test for consistency, are the ranks equal?
R(A)==R(cbind(A,b.new))
# Solve for the solution, see 0=-3 which is FALSE
Solve(A,b.new, fractions = TRUE)
plotEqn(A,b.new)
diag(1,nrow=3)
# Step-by-step process to solve for inverse
gaussianElimination(F,diag(1,nrow=3), verbose=TRUE, fractions=TRUE)
F <- matrix(c(2,-2,0,1,-1,1,0,3,-2), nrow=3)
# Step-by-step process to solve for inverse
gaussianElimination(F,diag(1,nrow=3), verbose=TRUE, fractions=TRUE)
FI <- fractions(inv(F))
inv(F)
inv(F)%*%F
fractions(inv(F))%*%F
inv(F)
fractions(inv(F))
fractions(inv(F))%*%F
Inverse(F)
inv(t(A)) == t(inv(A))
# install.packages("MASS")
# install.packages("knitr")
# install.packages("matlib")
# install.packages("pcaPP")
# install.packages("devtools")
# install_github("vqv/ggbiplot")
library(MASS)
library(knitr)
library(tidyverse)
library(magrittr)
library(dplyr)
library(matlib)
library(pcaPP)
library(devtools)
library(ggbiplot)
example.data <- mtcars
v = c(1,7,3)
# The exact same when wrapped in as.vector()
v = as.vector(c(1,7,3))
# Or can create a 1 column matrix
v = matrix(c(1,7,3))
A = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=2,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows (default)
B = matrix(
c(2, 4, 3, 1, 5, 7), # the data elements
nrow=3,              # number of rows
ncol=2,              # number of columns
byrow = FALSE)       # fill matrix by columns
C = matrix(
c(25, 4, 31, 1, 52, 7, 81, 22, 13), # the data elements
nrow=3,              # number of rows
byrow = TRUE)        # fill matrix by rows (default)
I = diag(1,      # The element(s) on the diagonal of matrix
nrow=3) # number of rows
# (assumes same number of columns or square)
U = matrix(1,
nrow=3,
ncol=3)
dimnames(A) = list(
c("row1", "row2"),         # row names
c("col1", "col2", "col3")) # column names
# Check the row and column labels (in list format)
# labels(A)
# t(A)
k = 5
kB = k*B
# WRONG
# c(0,2)*B
# t(c(0,2))*B
# Error: non-conformable arrays
# 3 CORRECT methods
B.scaled = B%*%diag(c(0,2))
B.scaled = t(apply( B , 1 , function(x) x*c(0,2)))
B.scaled = sweep( B , 2 , c(0,2),'*')
vB = t(v)%*%B
Bv = t(B)%*%v
# Using element-wise mulitplication( * ):
# A*B
# Error: non-conformable arrays
AB = A%*%B #returns a 2x2 matrix
BA = B%*%A #returns a 3x3 matrix
BAC = B%*%A%*%C
C.centered = C-3
C.hat = C + matrix(c(0,-5,7), nrow=3, ncol=3, byrow=TRUE)
C.hat = t(apply( C , 1 , function(x) x+c(0,-5,7)))
C.hat = sweep( C , 2 , c(0,-5,7),'+')
A <- as.data.frame(A)
#as.matrix(A)
A %<>% mutate(col1=col1*8)
D <- matrix(c(1,1,1,2,3,7,1,0,9), nrow=3, byrow = TRUE)
e <- c(3,0,-17)
gaussianElimination(D,e, verbose=TRUE, fractions=TRUE)
D <- matrix(c(1,1,3,-2), nrow=2, byrow = TRUE)
e <- c(3,4)
gaussianElimination(D,e, verbose=TRUE, fractions=TRUE)
V <- matrix(c(2, 5, 3,1, 1, 1,4,-2,0), nrow=3, byrow = TRUE)
gaussianElimination(V, verbose=TRUE, fractions=TRUE)
A <- matrix(c(1,2,3, -1, 2, 1), 3, 2)
b <- c(2,1,3)
# Print the system of equations
showEqn(A,b)
# Test for consistency, are the ranks equal?
R(A)==R(cbind(A,b))
# Solve for the solution
Solve(A,b, fractions = TRUE)
plotEqn(A,b)
b.new <- c(2,1,6)
# Print the system of equations
showEqn(A,b.new)
# Test for consistency, are the ranks equal?
R(A)==R(cbind(A,b.new))
# Solve for the solution, see 0=-3 which is FALSE
Solve(A,b.new, fractions = TRUE)
plotEqn(A,b.new)
F <- matrix(c(2,-2,0,1,-1,1,0,3,-2), nrow=3)
# Step-by-step process to solve for inverse
gaussianElimination(F,diag(1,nrow=3), verbose=TRUE, fractions=TRUE)
FI <- fractions(inv(F))
FI <- fractions(Inverse(F))
FI <- fractions(solve(F))
inv(t(F)) == t(inv(F))
norm(C)
det(C)
sum(diag(C))
C
cov(A)
cov(C)
cor(v,c(0,2,4))
cor(v,2*v)
# Not perpendicular
t(v)%*%c(0,2,4)
trace(A)
trace(C)
crossprod(crossprod(B,A),solve(B))
crossprod(crossprod(C,F),solve(C))
C
F
F
crossprod(crossprod(C,F),solve(C))
example.data$new <- 2*example.data$wt-70
lin.model2 <- lm(mpg~wt+new,data=example.data)
X2 <- matrix(c(rep(1,length(example.data$wt)),example.data$wt, example.data$new),ncol=3)
Y <- example.data$mpg
# Same result:
ginv(t(X2)%*%X2)%*%t(X2)%*%Y
coef(lin.model2)
# Same result:
ginv(t(X2)%*%X2)%*%t(X2)%*%Y
coef(lin.model2)
ginv(t(X2)%*%X2)%*%t(X2)%*%Y
coef(lin.model2)
ginv(t(X2)%*%X2)
t(X2)%*%X2
ginv(t(X2)%*%X2)%*%(t(X2)%*%X2)
solve(t(X2)%*%X2)%*%(t(X2)%*%X2)
Solve(t(X2)%*%X2)%*%(t(X2)%*%X2)
lm(mpg~wt+new,data=example.data)
R(X2)
R(X2)==R(cbind(X2,Y))
R(cbind(X2,Y))
predict(lin.model)
# Not the same result:
g.coef <- ginv(t(X2)%*%X2)%*%t(X2)%*%Y
g.coef%*%X
g.coef%*%X2
g.coef%*%t(X2)
t(g.coef)%*%X2
t(g.coef)
X2
X2%*%g.coef
predict(lin.model)
X2%*%g.coef
X2%*%g.coef ==predict(lin.model)
X2%*%g.coef -predict(lin.model)
X2%*%g.coef==predict(lin.model)
sum(X2%*%g.coef==predict(lin.model))
length(Y)
X2%*%g.coef-predict(lin.model)
sum(round(X2%*%g.coef,8)==round(predict(lin.model),8))
plot(example.data$wt,example.data$mpg,pch=20,col="black")
lines(example.data$wt,predict(lin.model),lty=1,lwd=2,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=1,col="red")
example.data$new <- 2*example.data$wt-70
lin.model2 <- lm(mpg~wt+new,data=example.data)
X2 <- matrix(c(rep(1,length(example.data$wt)),example.data$wt, example.data$new),ncol=3)
Y <- example.data$mpg
# Unequal ranks, nonsingular matrix
# R(X2)==R(cbind(X2,Y))
# Not the same result:
g.coef <- ginv(t(X2)%*%X2)%*%t(X2)%*%Y
coef(lin.model2)
g.pred <- X2%*%g.coef
g.pred==predict(lin.model)
head(g.pred==predict(lin.model))
sum(g.pred==predict(lin.model))
length(Y)
head(g.pred-predict(lin.model))
sum(round(g.pred,8)==round(predict(lin.model),8))
plot(example.data$wt,example.data$mpg,pch=20,col="black")
lines(example.data$wt,predict(lin.model),lty=1,lwd=2,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=1,col="red")
Y.pred <- inv(t(X)%*%X)%*%t(X)%*%Y
X <- matrix(c(rep(1,length(example.data$wt)),example.data$wt),ncol=2)
Y <- example.data$mpg
Y.pred <- inv(t(X)%*%X)%*%t(X)%*%Y
Y.pred
X%*%inv(t(X)%*%X)%*%t(X)%*%Y
Y.pred <- X%*%inv(t(X)%*%X)%*%t(X)%*%Y
cbind(Y.pred,g.pred,predict(lin.model))
lin.model <- lm(mpg~wt,data=example.data)
X <- matrix(c(rep(1,length(example.data$wt)),example.data$wt),ncol=2)
Y <- example.data$mpg
# Same result:
# solve(t(X)%*%X)%*%t(X)%*%Y
# coef(lin.model)
plot(example.data$wt, example.data$mpg, main="Car Weight vs. Plot Fuel Consumption ",xlab="Weight", ylab="mpg")
abline(lm(mpg~wt,data=example.data), col="red")
example.data$new <- 2*example.data$wt-70
lin.model2 <- lm(mpg~wt+new,data=example.data)
X2 <- matrix(c(rep(1,length(example.data$wt)),example.data$wt, example.data$new),ncol=3)
Y <- example.data$mpg
Y.pred <- X%*%inv(t(X)%*%X)%*%t(X)%*%Y
cbind(Y.pred,g.pred,predict(lin.model))
Y.pred <- X%*%solve(t(X)%*%X)%*%t(X)%*%Y
cbind(Y.pred,g.pred,predict(lin.model))
solve(t(X)%*%X)
solve(t(X)%*%X)
inv(t(X)%*%X)
coef(lin.model2)
# Same result of coefficients:
Y.coef <- solve(t(X)%*%X)%*%t(X)%*%Y
Y.pred <- predict(lin.model)
plot(example.data$wt,example.data$mpg,pch=20,col="black")
lines(example.data$wt,predict(lin.model),lty=1,lwd=2,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=1,col="red")
plot(example.data$wt,example.data$mpg,pch=20,col="black", main="")
lines(example.data$wt,predict(lin.model),lty=1,lwd=4,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=1,col="red")
plot(example.data$wt,example.data$mpg,pch=20,col="black", main="")
lines(example.data$wt,predict(lin.model),lty=1,lwd=4,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=2,col="red")
plot(example.data$wt,example.data$mpg,pch=20,col="black", main="Model 1 vs. Model 2 Predictions")
lines(example.data$wt,Y.pred,lty=1,lwd=4,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=2,col="red")
C
upper.tri(C, diag=TRUE)
C[upC]
# matrix of logical variables returned
upC <- upper.tri(C, diag=TRUE)
# return the values in the upper traingle
C[upC]
lowC <- lower.tri(C)
# replace the values in the lower traingle with 0's
C[lowC] <- 0
C
is_symmetric_matrix(C)
eig.C <- eigen(C)
eig.C$values
eig.C$vectors
svd(C)
C.svd <- svd(C)
ds <- diag(1/C.svd$d)
u <- C.svd$u
v <- C.svd$v
us <- as.matrix(u)
vs <- as.matrix(v)
C.ginv <- vs %*% ds %*% t(us)
C.ginv
ginv(C)
example.data <-mtcars
View(example.data)
plot(example.data$wt, example.data$mpg, main="Car Weight vs. Plot Fuel Consumption ",xlab="Weight", ylab="mpg")
plot(example.data$wt, example.data$mpg, main="Car Weight vs. Fuel Consumption PLot",xlab="Weight", ylab="mpg")
lin.model <- lm(mpg ~ wt, data=example.data)
coef(lin.model)
coef(lin.model)
summary(lin.model)
(X <- matrix(c(rep(1,length(example.data$wt)),example.data$wt),ncol=2))
dimnames(X) = list(c("incercept", "weight"))
dimnames(X) = list(c("incercept", "weight"), NA)
(X <- matrix(c(rep(1,length(example.data$wt)),example.data$wt),ncol=2))
n =length(example.data$wt)
rep(1,n)
(X <- matrix(c(rep(1,n),example.data$wt),ncol=2))
Y <- example.data$mpg
# Same result of coefficients:
(Y.coef <- solve(t(X)%*%X)%*%t(X)%*%Y)
(Y.coef <- solve(t(X)%*%X)%*%t(X)%*%Y)
coef(lin.model)
(Y.pred <- predict(lin.model))
(Y.pred <- X%*%Y.coef)
plot(example.data$wt, example.data$mpg, main="Car Weight vs. Fuel Consumption Plot",xlab="Weight", ylab="mpg")
abline(lm(mpg~wt,data=example.data), col="red")
#Create new variable that is a linear combination of weight
example.data$new <- 2*example.data$wt-70
lin.model2 <- lm(mpg~wt+new,data=example.data)
summary(lin.model2)
summary(lin.model2)
coef(lin.model2)
matrix(c(rep(1,length(example.data$wt)),example.data$wt, example.data$new),ncol=3)
# Unequal ranks, inconsistent
R(X2)==R(cbind(X2,Y))
solve(t(X2)%*%X2)
solve(t(X2)%*%X2)
# Because inconsistent cannot use regular inverse
# So instead we use generalized inverse
g.pred <- X2%*%ginv(t(X2)%*%X2)%*%t(X2)%*%Y
ginv(t(X2)%*%X2)%*%t(X2)%*%Y
g.pred
g.pred==predict(lin.model)
# Because inconsistent cannot use regular inverse
# So instead we use generalized inverse
g.coef <- ginv(t(X2)%*%X2)%*%t(X2)%*%Y
g.pred <- X2%*%g.coef
g.pred==predict(lin.model)
sum(g.pred==predict(lin.model))
sum(g.pred==predict(lin.model))
sum(g.pred==predict(lin.model))/32
sum(g.pred==predict(lin.model))
g.pred==predict(lin.model)
round(g.pred,8)
sum(round(g.pred,8)==round(predict(lin.model),8))
round(g.pred,8)==round(predict(lin.model),8)
plot(example.data$wt,example.data$mpg,pch=20,col="black", main="Model 1 vs. Model 2 Predictions", xlab="Weight", ylab="mpg")
lines(example.data$wt,Y.pred,lty=1,lwd=4,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=2,col="red")
plot(example.data$wt,example.data$mpg,pch=20,col="black", main="Model 1 vs. Model 2 Predictions", xlab="Weight", ylab="mpg")
lines(example.data$wt,Y.pred,lty=1,lwd=8,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=2,col="red")
plot(example.data$wt,example.data$mpg,pch=20,col="black", main="Model 1 vs. Model 2 Predictions", xlab="Weight", ylab="mpg")
lines(example.data$wt,Y.pred,lty=1,lwd=8,col="blue")
lines(example.data$wt,g.pred,lty=1,lwd=2,col="green")
